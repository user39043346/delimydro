// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Token, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Token, error)
	RenewToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Token, error)
	SearchFriend(ctx context.Context, in *SearchFriendRequest, opts ...grpc.CallOption) (*SearchFriendResponse, error)
	AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*Empty, error)
	ListMyFriends(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListMyFriendsResponse, error)
	CreateFriendExpense(ctx context.Context, in *CreateFriendExpenseRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteFriendExpense(ctx context.Context, in *DeleteFriendExpenseRequest, opts ...grpc.CallOption) (*Empty, error)
	ListFriendsExpenses(ctx context.Context, in *ListFriendsExpensesRequest, opts ...grpc.CallOption) (*ListFriendsExpensesResponse, error)
	FriendSettleUp(ctx context.Context, in *FriendSettleUpRequest, opts ...grpc.CallOption) (*Empty, error)
	SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserResponse, error)
	GetUsersWithOutstandingBalance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetUsersWithOutstandingBalanceResponse, error)
	GetUserGroupsDistribution(ctx context.Context, in *GetUserGroupsDistributionRequest, opts ...grpc.CallOption) (*GetUserGroupsDistributionResponse, error)
	SearchGroup(ctx context.Context, in *SearchGroupRequest, opts ...grpc.CallOption) (*SearchGroupResponse, error)
	CreateGroupExpense(ctx context.Context, in *CreateGroupExpenseRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteGroupExpense(ctx context.Context, in *DeleteGroupExpenseRequest, opts ...grpc.CallOption) (*Empty, error)
	ListGroupExpenses(ctx context.Context, in *ListGroupExpensesRequest, opts ...grpc.CallOption) (*ListGroupExpensesResponse, error)
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*Empty, error)
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	ChangeGroupType(ctx context.Context, in *ChangeGroupTypeRequest, opts ...grpc.CallOption) (*Empty, error)
	GetGroupBalances(ctx context.Context, in *GetGroupBalancesRequest, opts ...grpc.CallOption) (*GetGroupBalancesResponse, error)
	AddUsersToGroup(ctx context.Context, in *AddUsersToGroupRequest, opts ...grpc.CallOption) (*Empty, error)
	GetGroupUsers(ctx context.Context, in *GetGroupUsersRequest, opts ...grpc.CallOption) (*GetGroupUsersResponse, error)
	GroupSettleUp(ctx context.Context, in *GroupSettleUpRequest, opts ...grpc.CallOption) (*Empty, error)
	GetUserPayersDebtorsInGroup(ctx context.Context, in *GetUserPayersDebtorsInGroupRequest, opts ...grpc.CallOption) (*GetUserPayersDebtorsInGroupResponse, error)
	CheckUserInGroup(ctx context.Context, in *CheckUserInGroupRequest, opts ...grpc.CallOption) (*CheckUserInGroupResponse, error)
	MyProfile(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MyProfileResponse, error)
	ListMyGroups(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListMyGroupsResponse, error)
	LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*Empty, error)
	JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*Empty, error)
	ExpenseInfo(ctx context.Context, in *ExpenseInfoRequest, opts ...grpc.CallOption) (*ExpenseInfoResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/api.Service/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/api.Service/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RenewToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/api.Service/RenewToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SearchFriend(ctx context.Context, in *SearchFriendRequest, opts ...grpc.CallOption) (*SearchFriendResponse, error) {
	out := new(SearchFriendResponse)
	err := c.cc.Invoke(ctx, "/api.Service/SearchFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Service/AddFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListMyFriends(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListMyFriendsResponse, error) {
	out := new(ListMyFriendsResponse)
	err := c.cc.Invoke(ctx, "/api.Service/ListMyFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateFriendExpense(ctx context.Context, in *CreateFriendExpenseRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Service/CreateFriendExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteFriendExpense(ctx context.Context, in *DeleteFriendExpenseRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Service/DeleteFriendExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListFriendsExpenses(ctx context.Context, in *ListFriendsExpensesRequest, opts ...grpc.CallOption) (*ListFriendsExpensesResponse, error) {
	out := new(ListFriendsExpensesResponse)
	err := c.cc.Invoke(ctx, "/api.Service/ListFriendsExpenses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) FriendSettleUp(ctx context.Context, in *FriendSettleUpRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Service/FriendSettleUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserResponse, error) {
	out := new(SearchUserResponse)
	err := c.cc.Invoke(ctx, "/api.Service/SearchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetUsersWithOutstandingBalance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetUsersWithOutstandingBalanceResponse, error) {
	out := new(GetUsersWithOutstandingBalanceResponse)
	err := c.cc.Invoke(ctx, "/api.Service/GetUsersWithOutstandingBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetUserGroupsDistribution(ctx context.Context, in *GetUserGroupsDistributionRequest, opts ...grpc.CallOption) (*GetUserGroupsDistributionResponse, error) {
	out := new(GetUserGroupsDistributionResponse)
	err := c.cc.Invoke(ctx, "/api.Service/GetUserGroupsDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SearchGroup(ctx context.Context, in *SearchGroupRequest, opts ...grpc.CallOption) (*SearchGroupResponse, error) {
	out := new(SearchGroupResponse)
	err := c.cc.Invoke(ctx, "/api.Service/SearchGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateGroupExpense(ctx context.Context, in *CreateGroupExpenseRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Service/CreateGroupExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteGroupExpense(ctx context.Context, in *DeleteGroupExpenseRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Service/DeleteGroupExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListGroupExpenses(ctx context.Context, in *ListGroupExpensesRequest, opts ...grpc.CallOption) (*ListGroupExpensesResponse, error) {
	out := new(ListGroupExpensesResponse)
	err := c.cc.Invoke(ctx, "/api.Service/ListGroupExpenses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, "/api.Service/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Service/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, "/api.Service/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ChangeGroupType(ctx context.Context, in *ChangeGroupTypeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Service/ChangeGroupType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetGroupBalances(ctx context.Context, in *GetGroupBalancesRequest, opts ...grpc.CallOption) (*GetGroupBalancesResponse, error) {
	out := new(GetGroupBalancesResponse)
	err := c.cc.Invoke(ctx, "/api.Service/GetGroupBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddUsersToGroup(ctx context.Context, in *AddUsersToGroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Service/AddUsersToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetGroupUsers(ctx context.Context, in *GetGroupUsersRequest, opts ...grpc.CallOption) (*GetGroupUsersResponse, error) {
	out := new(GetGroupUsersResponse)
	err := c.cc.Invoke(ctx, "/api.Service/GetGroupUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GroupSettleUp(ctx context.Context, in *GroupSettleUpRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Service/GroupSettleUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetUserPayersDebtorsInGroup(ctx context.Context, in *GetUserPayersDebtorsInGroupRequest, opts ...grpc.CallOption) (*GetUserPayersDebtorsInGroupResponse, error) {
	out := new(GetUserPayersDebtorsInGroupResponse)
	err := c.cc.Invoke(ctx, "/api.Service/GetUserPayersDebtorsInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CheckUserInGroup(ctx context.Context, in *CheckUserInGroupRequest, opts ...grpc.CallOption) (*CheckUserInGroupResponse, error) {
	out := new(CheckUserInGroupResponse)
	err := c.cc.Invoke(ctx, "/api.Service/CheckUserInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) MyProfile(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MyProfileResponse, error) {
	out := new(MyProfileResponse)
	err := c.cc.Invoke(ctx, "/api.Service/MyProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListMyGroups(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListMyGroupsResponse, error) {
	out := new(ListMyGroupsResponse)
	err := c.cc.Invoke(ctx, "/api.Service/ListMyGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Service/LeaveGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Service/JoinGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ExpenseInfo(ctx context.Context, in *ExpenseInfoRequest, opts ...grpc.CallOption) (*ExpenseInfoResponse, error) {
	out := new(ExpenseInfoResponse)
	err := c.cc.Invoke(ctx, "/api.Service/ExpenseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	Register(context.Context, *RegisterRequest) (*Token, error)
	Login(context.Context, *LoginRequest) (*Token, error)
	RenewToken(context.Context, *Empty) (*Token, error)
	SearchFriend(context.Context, *SearchFriendRequest) (*SearchFriendResponse, error)
	AddFriend(context.Context, *AddFriendRequest) (*Empty, error)
	ListMyFriends(context.Context, *Empty) (*ListMyFriendsResponse, error)
	CreateFriendExpense(context.Context, *CreateFriendExpenseRequest) (*Empty, error)
	DeleteFriendExpense(context.Context, *DeleteFriendExpenseRequest) (*Empty, error)
	ListFriendsExpenses(context.Context, *ListFriendsExpensesRequest) (*ListFriendsExpensesResponse, error)
	FriendSettleUp(context.Context, *FriendSettleUpRequest) (*Empty, error)
	SearchUser(context.Context, *SearchUserRequest) (*SearchUserResponse, error)
	GetUsersWithOutstandingBalance(context.Context, *Empty) (*GetUsersWithOutstandingBalanceResponse, error)
	GetUserGroupsDistribution(context.Context, *GetUserGroupsDistributionRequest) (*GetUserGroupsDistributionResponse, error)
	SearchGroup(context.Context, *SearchGroupRequest) (*SearchGroupResponse, error)
	CreateGroupExpense(context.Context, *CreateGroupExpenseRequest) (*Empty, error)
	DeleteGroupExpense(context.Context, *DeleteGroupExpenseRequest) (*Empty, error)
	ListGroupExpenses(context.Context, *ListGroupExpensesRequest) (*ListGroupExpensesResponse, error)
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*Empty, error)
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	ChangeGroupType(context.Context, *ChangeGroupTypeRequest) (*Empty, error)
	GetGroupBalances(context.Context, *GetGroupBalancesRequest) (*GetGroupBalancesResponse, error)
	AddUsersToGroup(context.Context, *AddUsersToGroupRequest) (*Empty, error)
	GetGroupUsers(context.Context, *GetGroupUsersRequest) (*GetGroupUsersResponse, error)
	GroupSettleUp(context.Context, *GroupSettleUpRequest) (*Empty, error)
	GetUserPayersDebtorsInGroup(context.Context, *GetUserPayersDebtorsInGroupRequest) (*GetUserPayersDebtorsInGroupResponse, error)
	CheckUserInGroup(context.Context, *CheckUserInGroupRequest) (*CheckUserInGroupResponse, error)
	MyProfile(context.Context, *Empty) (*MyProfileResponse, error)
	ListMyGroups(context.Context, *Empty) (*ListMyGroupsResponse, error)
	LeaveGroup(context.Context, *LeaveGroupRequest) (*Empty, error)
	JoinGroup(context.Context, *JoinGroupRequest) (*Empty, error)
	ExpenseInfo(context.Context, *ExpenseInfoRequest) (*ExpenseInfoResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) Register(context.Context, *RegisterRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedServiceServer) Login(context.Context, *LoginRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedServiceServer) RenewToken(context.Context, *Empty) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewToken not implemented")
}
func (UnimplementedServiceServer) SearchFriend(context.Context, *SearchFriendRequest) (*SearchFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFriend not implemented")
}
func (UnimplementedServiceServer) AddFriend(context.Context, *AddFriendRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (UnimplementedServiceServer) ListMyFriends(context.Context, *Empty) (*ListMyFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyFriends not implemented")
}
func (UnimplementedServiceServer) CreateFriendExpense(context.Context, *CreateFriendExpenseRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFriendExpense not implemented")
}
func (UnimplementedServiceServer) DeleteFriendExpense(context.Context, *DeleteFriendExpenseRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriendExpense not implemented")
}
func (UnimplementedServiceServer) ListFriendsExpenses(context.Context, *ListFriendsExpensesRequest) (*ListFriendsExpensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFriendsExpenses not implemented")
}
func (UnimplementedServiceServer) FriendSettleUp(context.Context, *FriendSettleUpRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendSettleUp not implemented")
}
func (UnimplementedServiceServer) SearchUser(context.Context, *SearchUserRequest) (*SearchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedServiceServer) GetUsersWithOutstandingBalance(context.Context, *Empty) (*GetUsersWithOutstandingBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersWithOutstandingBalance not implemented")
}
func (UnimplementedServiceServer) GetUserGroupsDistribution(context.Context, *GetUserGroupsDistributionRequest) (*GetUserGroupsDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroupsDistribution not implemented")
}
func (UnimplementedServiceServer) SearchGroup(context.Context, *SearchGroupRequest) (*SearchGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGroup not implemented")
}
func (UnimplementedServiceServer) CreateGroupExpense(context.Context, *CreateGroupExpenseRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupExpense not implemented")
}
func (UnimplementedServiceServer) DeleteGroupExpense(context.Context, *DeleteGroupExpenseRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupExpense not implemented")
}
func (UnimplementedServiceServer) ListGroupExpenses(context.Context, *ListGroupExpensesRequest) (*ListGroupExpensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupExpenses not implemented")
}
func (UnimplementedServiceServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedServiceServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedServiceServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedServiceServer) ChangeGroupType(context.Context, *ChangeGroupTypeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeGroupType not implemented")
}
func (UnimplementedServiceServer) GetGroupBalances(context.Context, *GetGroupBalancesRequest) (*GetGroupBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupBalances not implemented")
}
func (UnimplementedServiceServer) AddUsersToGroup(context.Context, *AddUsersToGroupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsersToGroup not implemented")
}
func (UnimplementedServiceServer) GetGroupUsers(context.Context, *GetGroupUsersRequest) (*GetGroupUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupUsers not implemented")
}
func (UnimplementedServiceServer) GroupSettleUp(context.Context, *GroupSettleUpRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupSettleUp not implemented")
}
func (UnimplementedServiceServer) GetUserPayersDebtorsInGroup(context.Context, *GetUserPayersDebtorsInGroupRequest) (*GetUserPayersDebtorsInGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPayersDebtorsInGroup not implemented")
}
func (UnimplementedServiceServer) CheckUserInGroup(context.Context, *CheckUserInGroupRequest) (*CheckUserInGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserInGroup not implemented")
}
func (UnimplementedServiceServer) MyProfile(context.Context, *Empty) (*MyProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyProfile not implemented")
}
func (UnimplementedServiceServer) ListMyGroups(context.Context, *Empty) (*ListMyGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyGroups not implemented")
}
func (UnimplementedServiceServer) LeaveGroup(context.Context, *LeaveGroupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedServiceServer) JoinGroup(context.Context, *JoinGroupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedServiceServer) ExpenseInfo(context.Context, *ExpenseInfoRequest) (*ExpenseInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpenseInfo not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RenewToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RenewToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/RenewToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RenewToken(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SearchFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SearchFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/SearchFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SearchFriend(ctx, req.(*SearchFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddFriend(ctx, req.(*AddFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListMyFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListMyFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/ListMyFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListMyFriends(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateFriendExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFriendExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateFriendExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/CreateFriendExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateFriendExpense(ctx, req.(*CreateFriendExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteFriendExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteFriendExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/DeleteFriendExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteFriendExpense(ctx, req.(*DeleteFriendExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListFriendsExpenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFriendsExpensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListFriendsExpenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/ListFriendsExpenses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListFriendsExpenses(ctx, req.(*ListFriendsExpensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_FriendSettleUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendSettleUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).FriendSettleUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/FriendSettleUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).FriendSettleUp(ctx, req.(*FriendSettleUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/SearchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SearchUser(ctx, req.(*SearchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetUsersWithOutstandingBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetUsersWithOutstandingBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/GetUsersWithOutstandingBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetUsersWithOutstandingBalance(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetUserGroupsDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGroupsDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetUserGroupsDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/GetUserGroupsDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetUserGroupsDistribution(ctx, req.(*GetUserGroupsDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SearchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SearchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/SearchGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SearchGroup(ctx, req.(*SearchGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateGroupExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateGroupExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/CreateGroupExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateGroupExpense(ctx, req.(*CreateGroupExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteGroupExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteGroupExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/DeleteGroupExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteGroupExpense(ctx, req.(*DeleteGroupExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListGroupExpenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupExpensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListGroupExpenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/ListGroupExpenses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListGroupExpenses(ctx, req.(*ListGroupExpensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ChangeGroupType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeGroupTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ChangeGroupType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/ChangeGroupType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ChangeGroupType(ctx, req.(*ChangeGroupTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetGroupBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetGroupBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/GetGroupBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetGroupBalances(ctx, req.(*GetGroupBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddUsersToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUsersToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddUsersToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/AddUsersToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddUsersToGroup(ctx, req.(*AddUsersToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/GetGroupUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetGroupUsers(ctx, req.(*GetGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GroupSettleUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupSettleUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GroupSettleUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/GroupSettleUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GroupSettleUp(ctx, req.(*GroupSettleUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetUserPayersDebtorsInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPayersDebtorsInGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetUserPayersDebtorsInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/GetUserPayersDebtorsInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetUserPayersDebtorsInGroup(ctx, req.(*GetUserPayersDebtorsInGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CheckUserInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserInGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CheckUserInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/CheckUserInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CheckUserInGroup(ctx, req.(*CheckUserInGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_MyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).MyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/MyProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).MyProfile(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListMyGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListMyGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/ListMyGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListMyGroups(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/LeaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).LeaveGroup(ctx, req.(*LeaveGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/JoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).JoinGroup(ctx, req.(*JoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ExpenseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpenseInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ExpenseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/ExpenseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ExpenseInfo(ctx, req.(*ExpenseInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Service_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Service_Login_Handler,
		},
		{
			MethodName: "RenewToken",
			Handler:    _Service_RenewToken_Handler,
		},
		{
			MethodName: "SearchFriend",
			Handler:    _Service_SearchFriend_Handler,
		},
		{
			MethodName: "AddFriend",
			Handler:    _Service_AddFriend_Handler,
		},
		{
			MethodName: "ListMyFriends",
			Handler:    _Service_ListMyFriends_Handler,
		},
		{
			MethodName: "CreateFriendExpense",
			Handler:    _Service_CreateFriendExpense_Handler,
		},
		{
			MethodName: "DeleteFriendExpense",
			Handler:    _Service_DeleteFriendExpense_Handler,
		},
		{
			MethodName: "ListFriendsExpenses",
			Handler:    _Service_ListFriendsExpenses_Handler,
		},
		{
			MethodName: "FriendSettleUp",
			Handler:    _Service_FriendSettleUp_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _Service_SearchUser_Handler,
		},
		{
			MethodName: "GetUsersWithOutstandingBalance",
			Handler:    _Service_GetUsersWithOutstandingBalance_Handler,
		},
		{
			MethodName: "GetUserGroupsDistribution",
			Handler:    _Service_GetUserGroupsDistribution_Handler,
		},
		{
			MethodName: "SearchGroup",
			Handler:    _Service_SearchGroup_Handler,
		},
		{
			MethodName: "CreateGroupExpense",
			Handler:    _Service_CreateGroupExpense_Handler,
		},
		{
			MethodName: "DeleteGroupExpense",
			Handler:    _Service_DeleteGroupExpense_Handler,
		},
		{
			MethodName: "ListGroupExpenses",
			Handler:    _Service_ListGroupExpenses_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Service_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Service_DeleteGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _Service_GetGroup_Handler,
		},
		{
			MethodName: "ChangeGroupType",
			Handler:    _Service_ChangeGroupType_Handler,
		},
		{
			MethodName: "GetGroupBalances",
			Handler:    _Service_GetGroupBalances_Handler,
		},
		{
			MethodName: "AddUsersToGroup",
			Handler:    _Service_AddUsersToGroup_Handler,
		},
		{
			MethodName: "GetGroupUsers",
			Handler:    _Service_GetGroupUsers_Handler,
		},
		{
			MethodName: "GroupSettleUp",
			Handler:    _Service_GroupSettleUp_Handler,
		},
		{
			MethodName: "GetUserPayersDebtorsInGroup",
			Handler:    _Service_GetUserPayersDebtorsInGroup_Handler,
		},
		{
			MethodName: "CheckUserInGroup",
			Handler:    _Service_CheckUserInGroup_Handler,
		},
		{
			MethodName: "MyProfile",
			Handler:    _Service_MyProfile_Handler,
		},
		{
			MethodName: "ListMyGroups",
			Handler:    _Service_ListMyGroups_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _Service_LeaveGroup_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _Service_JoinGroup_Handler,
		},
		{
			MethodName: "ExpenseInfo",
			Handler:    _Service_ExpenseInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/api.proto",
}
